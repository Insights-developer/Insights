Insights App: Architectural & RBAC Overview (as of July 22, 2025)

MAJOR NAVIGATION SYSTEM OVERHAUL - July 22, 2025
================================================================
Complete replacement of top navigation bar with modern left sidebar navigation system:

Navigation Architecture Changes:
* Removed traditional top navbar entirely
* Implemented collapsible left sidebar navigation (/frontend/app/components/ui/Sidebar.tsx)
* Added upper-right user information box (/frontend/app/components/ui/UserInfoBox.tsx)
* Updated layout.tsx to use sidebar + main content + top user bar structure

Database Enhancements:
* Added login history tracking to users table:
  - current_login_at (timestamp)
  - previous_login_at (timestamp) 
  - login_count (integer with default 0)
* Migration script: /workspaces/Insights/add_login_history.sql
* New API endpoint: /api/user/update-login for tracking login timestamps
* Enhanced user profile API: /api/user/profile (includes groups, login history)

Sidebar Features:
* RBAC-based navigation visibility (only shows links user has access to)
* Dashboard-style button effects (blue backgrounds, hover states, transitions)
* Alphabetically organized navigation items
* Profile and collapse controls grouped at bottom
* Light grey background (#e9ecef) with dark borders
* Responsive design (60px collapsed, 250px expanded)
* Auto-refresh on admin permission changes

Icon System Updates:
* Profile icon: gear/settings (was person)
* Contact icon: envelope/mail (was message-circle) 
* Admin icon: person/user (was settings)
* Consistent iconography across sidebar navigation and page headers

User Experience Improvements:
* User info box displays welcome messages, groups, last login, logout option
* Proper logout flow that clears all navigation elements and shows login page
* Authentication state listeners for immediate UI updates
* Login history tracking and display

Loading States & Spinners:
* Standardized loading spinners across all pages
* Consistent UI pattern with Card + Spinner + loading message
* Added proper loading states to: Draws, Games, Results, Profile, Contact pages
* All pages now show spinners during authentication/permission checks

Technical Infrastructure:
* Updated Supabase client libraries from @supabase/auth-helpers-nextjs to @supabase/ssr
* App Router compatible authentication setup
* Proper cookie handling for server-side auth
* Environment variables template (.env.local.example)
* Fixed TypeScript errors and cleaned up redundant code

Design System Integration:
* Header background matches main page design (#f8f9fa)
* Dashboard-style color scheme (blues, greys, consistent spacing)
* Smooth transitions and hover effects throughout navigation
* Clean, modern aesthetic replacing traditional navbar approach

RBAC Integration:
* Sidebar navigation fully integrated with existing RBAC system
* Dynamic navigation based on user feature permissions
* Admin dashboard cleaned up (removed redundant sign out, email display)
* Maintained all existing permission checking while improving UX

Project Structure & Context
================================================================
* Monorepo root: /workspaces/Insights/
* Frontend: /frontend/ (Next.js app)
* Backend: /backend/ (details not primary in this thread)
* Frontend custom logic is mostly in /frontend/app/
* Key custom modules and hooks:
  - /frontend/utils/hooks/useRequireFeature.tsx – universal permission-checking hook
  - /frontend/utils/rbac.ts – RBAC utility functions for feature aggregation
  - /frontend/app/components/ui/Sidebar.tsx – modern navigation system
  - /frontend/app/components/ui/UserInfoBox.tsx – user information and controls
Authentication & User Flow
================================================================
* Uses Supabase for authentication (email/password flow) with updated @supabase/ssr package
* Modern authentication state management with auth listeners for immediate UI updates
* User is routed to their dashboard upon login with automatic login timestamp tracking
* Email verification is tracked and enforced
* User data lives in a custom users table (app DB), not just Supabase's auth
* Enhanced logout flow that immediately clears all navigation elements
* Login history tracking (current_login_at, previous_login_at, login_count)

RBAC: Role-Based Access Control Design
================================================================
* Legacy system:�used a user table�role�field (e.g.,�role = 'admin')
* Current, improved system:�all authorization and UI access is governed by group memberships and feature permissions:
* Tables:
* users
* access_groups
* user_access_groups�(join table: which users are in which groups)
* features�(global/system features)
* access_group_features�(join table: which groups are allowed which features)
* Features�are descriptive, e.g.�'admin_dashboard',�'games_page',�'profile_page', etc.
* Admins and users are put into groups, and all permissions (API & UI) check for feature keys via group membership.
Frontend RBAC Protection:
================================================================
* useRequireFeature(featureKey): React hook that checks, for each page, whether the current user is assigned a given feature through any of their groups.
* Fetches the user's feature list via /api/user/features.
* Redirects or hides content if the feature is not allowed.
* Integrated with modern sidebar navigation for dynamic link visibility
* Enhanced with proper loading spinners and consistent UI patterns
* Pattern:
  - Every protected page calls this hook with its required feature key (e.g., 'games_page', 'results_page').
  - All pages now include standardized loading states with spinners
  - Example in /app/results/page.tsx:

tsx
import { useRequireFeature } from '../../utils/hooks/useRequireFeature';
import Spinner from '../components/ui/Spinner';
import Card from '../components/ui/Cards';

export default function ResultsPage() {
  const { allowed, loading } = useRequireFeature('results_page');
  
  if (loading) return (
    <main style={{ maxWidth: 600, margin: '3rem auto', textAlign: 'center' }}>
      <Card>
        <div className="flex flex-col items-center justify-center py-12">
          <Spinner size={48} />
          <div className="mt-4 text-muted">Loading results…</div>
        </div>
      </Card>
    </main>
  );
  
  if (!allowed) return <Forbidden />;
  return <main> ... </main>;
}
Admin & Feature Management:
================================================================
* Full CRUD on users, groups, group memberships, features, and group-feature assignments all via admin UI.
* All admin API routes and UI panels now check for RBAC features (especially 'admin_dashboard') for access, not role.
* Admin dashboard streamlined: removed redundant sign out button, user email display, and obvious headings
* The admin can control which group(s) have access to which features/areas, immediately influencing user access and UI.
* Navigation updates automatically when admin changes user permissions

API Conventions:
================================================================
* All protected admin API endpoints now use:
  - getUserFeatures(user.id) which aggregates all feature keys from user's group memberships.
  - Only allow API actions (user changes, group edits, etc.) if the user has the right feature assigned.
* No more static role checks; role is now legacy and not relevant for access decisions.
* New API endpoints:
  - /api/user/profile - Enhanced user profile with groups and login history
  - /api/user/update-login - Login timestamp tracking
  - /api/user/nav - Dynamic navigation based on user permissions

Profile/Optional User Data:
================================================================
* The users table exposes optional fields like username and phone.
* Enhanced with login tracking: current_login_at, previous_login_at, login_count
* User profile accessible via modern navigation sidebar (gear icon)
* Login history displayed in user info box with formatted timestamps

Import & Pathing Conventions:
================================================================
* Primary hooks/utilities are in /frontend/utils/hooks/ or /frontend/utils/
* Navigation components in /frontend/app/components/ui/
* Pages import the useRequireFeature hook via relative paths (e.g., ../../utils/hooks/useRequireFeature) as absolute aliasing is not currently set up.
* Consistent import patterns for Spinner, Card, Icon, and Forbidden components

General Coding Patterns:
================================================================
* Strong preference for clear, direct code (as per your instructions/memories).
* Focus on frontloaded auth/permission checks in both API and UI.
* Consistent loading states and error handling across all pages
* Modern React patterns with proper state management and effect handling
* Responsive design considerations for navigation and layout components
* Attempts at minimal and DRY patterns for both backend (API routes) and frontend (hooks/components).

Environment & Configuration:
================================================================
* Updated to use @supabase/ssr package for Next.js App Router compatibility
* Environment variables template provided (.env.local.example)
* Proper TypeScript configuration and error handling
* Cookie-based session management for server-side authentication

In summary:
================================================================
Complete navigation system overhaul replacing traditional top navbar with modern left sidebar approach. All major admin and user-facing functionality is protected by group+feature RBAC, with group assignments managed via the admin UI, and each page/component doing an explicit feature check before exposing protected routes or actions. Enhanced user experience with login tracking, proper loading states, and streamlined authentication flow.

Legacy role-based checks have been removed. Backend and frontend communicate permission information clearly and directly, with a standard permission model that is easy to maintain and expand. The new navigation system provides better UX while maintaining full RBAC integration.

If you return to a new thread, mentioning "Insights App RBAC with modern sidebar navigation, last updated July 22, 2025" or referencing this brief will immediately cue me in to your architecture, design, and conventions!

