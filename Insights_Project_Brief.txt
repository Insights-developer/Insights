Insights App: Architectural & RBAC Overview (as of July 20, 2025)
Project Structure & Context
* Monorepo root: /workspaces/Insights/
* Frontend: /frontend/ (Next.js app)
* Backend: /backend/ (details not primary in this thread)
* Frontend custom logic is mostly in /frontend/app/
* Key custom modules and hooks:
* /frontend/utils/hooks/useRequireFeature.tsx – universal permission-checking hook
* /frontend/utils/rbac.ts – RBAC utility functions for feature aggregation
Authentication & User Flow
* Uses Supabase for authentication (email/password flow).
* User is routed to their dashboard upon login.
* Email verification is tracked and enforced.
* User data lives in a custom users table (app DB), not just Supabase's auth.
RBAC: Role-Based Access Control Design
* Legacy system: used a user table role field (e.g., role = 'admin')
* Current, improved system: all authorization and UI access is governed by group memberships and feature permissions:
* Tables:
* users
* access_groups
* user_access_groups (join table: which users are in which groups)
* features (global/system features)
* access_group_features (join table: which groups are allowed which features)
* Features are descriptive, e.g. 'admin_dashboard', 'games_page', 'profile_page', etc.
* Admins and users are put into groups, and all permissions (API & UI) check for feature keys via group membership.
Frontend RBAC Protection:
* useRequireFeature(featureKey): React hook that checks, for each page, whether the current user is assigned a given feature through any of their groups.
* Fetches the user's feature list via /api/user/features.
* Redirects or hides content if the feature is not allowed.
* Pattern:
* Every protected page calls this hook with its required feature key (e.g., 'games_page', 'results_page').
* Example in /app/results/page.tsx:
tsx
import { useRequireFeature } from '../../utils/hooks/useRequireFeature';
export default function ResultsPage() {
  const { allowed, loading } = useRequireFeature('results_page');
  if (loading) return <div>Loading…</div>;
  if (!allowed) return null;
  return <main> ... </main>;
}
Admin & Feature Management:
* Full CRUD on users, groups, group memberships, features, and group-feature assignments—all via admin UI.
* All admin API routes and UI panels now check for RBAC features (especially 'admin_dashboard') for access, not role.
* The admin can control which group(s) have access to which features/areas, immediately influencing user access and UI.
API Conventions:
* All protected admin API endpoints now use:
* getUserFeatures(user.id) which aggregates all feature keys from user's group memberships.
* Only allow API actions (user changes, group edits, etc.) if the user has the right feature assigned.
* No more static role checks; role is now legacy and not relevant for access decisions.
Profile/Optional User Data:
* The users table exposes optional fields like username and phone.
* These will be editable in a forthcoming ProfilePage (planned), handled using PATCH to /api/admin/users.
Import & Pathing Conventions:
* Primary hooks/utilities are in /frontend/utils/hooks/ or /frontend/utils/
* Pages import the useRequireFeature hook via relative paths (e.g., ../../utils/hooks/useRequireFeature) as absolute aliasing is not currently set up.
General Coding Patterns:
* Strong preference for clear, direct code (as per your instructions/memories).
* Focus on frontloaded auth/permission checks in both API and UI.
* Attempts at minimal and DRY patterns for both backend (API routes) and frontend (hooks/components).
In summary:
All major admin and user-facing functionality is protected by group+feature RBAC, with group assignments managed via the admin UI, and each page/component doing an explicit feature check before exposing protected routes or actions.
Legacy role-based checks have been removed.
Backend and frontend communicate permission information clearly and directly, with a standard permission model that is easy to maintain and expand.
If you return to a new thread, mentioning "Insights App RBAC, last updated July 2025" or referencing this brief will immediately cue me in to your architecture, design, and conventions!

