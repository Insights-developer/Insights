{
  "api_endpoints": [
    {
      "path": "/api/admin/groups",
      "methods": [
        "GET",
        "POST",
        "DELETE",
        "PATCH"
      ],
      "required_features": [],
      "parameters": [],
      "file": "frontend/app/api/admin/groups/route.ts"
    },
    {
      "path": "/api/admin/group-features",
      "methods": [
        "GET",
        "POST",
        "DELETE"
      ],
      "required_features": [],
      "parameters": [],
      "file": "frontend/app/api/admin/group-features/route.ts"
    },
    {
      "path": "/api/admin/features",
      "methods": [
        "GET",
        "POST",
        "DELETE",
        "PATCH"
      ],
      "required_features": [],
      "parameters": [],
      "file": "frontend/app/api/admin/features/route.ts"
    },
    {
      "path": "/api/admin/users-new",
      "methods": [],
      "required_features": [],
      "parameters": [],
      "file": "frontend/app/api/admin/users-new/route.ts"
    },
    {
      "path": "/api/admin/users",
      "methods": [
        "GET",
        "DELETE",
        "PATCH"
      ],
      "required_features": [],
      "parameters": [],
      "file": "frontend/app/api/admin/users/route.ts"
    },
    {
      "path": "/api/admin/insight-templates",
      "methods": [
        "GET",
        "POST",
        "DELETE",
        "PATCH"
      ],
      "required_features": [],
      "parameters": [],
      "file": "frontend/app/api/admin/insight-templates/route.ts"
    },
    {
      "path": "/api/admin/group-members",
      "methods": [
        "GET",
        "POST",
        "DELETE"
      ],
      "required_features": [],
      "parameters": [],
      "file": "frontend/app/api/admin/group-members/route.ts"
    },
    {
      "path": "/api/results",
      "methods": [
        "GET"
      ],
      "required_features": [],
      "parameters": [],
      "file": "frontend/app/api/results/route.ts"
    },
    {
      "path": "/api/games",
      "methods": [
        "GET"
      ],
      "required_features": [],
      "parameters": [],
      "file": "frontend/app/api/games/route.ts"
    },
    {
      "path": "/api/access-groups",
      "methods": [
        "GET"
      ],
      "required_features": [],
      "parameters": [],
      "file": "frontend/app/api/access-groups/route.ts"
    },
    {
      "path": "/api/ping",
      "methods": [
        "GET"
      ],
      "required_features": [],
      "parameters": [],
      "file": "frontend/app/api/ping/route.ts"
    },
    {
      "path": "/api/draws",
      "methods": [
        "GET",
        "POST"
      ],
      "required_features": [],
      "parameters": [],
      "file": "frontend/app/api/draws/route.ts"
    },
    {
      "path": "/api/uploads",
      "methods": [
        "POST"
      ],
      "required_features": [],
      "parameters": [],
      "file": "frontend/app/api/uploads/route.ts"
    },
    {
      "path": "/api/dashboard",
      "methods": [
        "GET"
      ],
      "required_features": [],
      "parameters": [],
      "file": "frontend/app/api/dashboard/route.ts"
    },
    {
      "path": "/api/user/nav",
      "methods": [
        "GET"
      ],
      "required_features": [],
      "parameters": [],
      "file": "frontend/app/api/user/nav/route.ts"
    },
    {
      "path": "/api/user/features",
      "methods": [
        "GET"
      ],
      "required_features": [],
      "parameters": [],
      "file": "frontend/app/api/user/features/route.ts"
    },
    {
      "path": "/api/user/profile",
      "methods": [
        "GET",
        "PATCH"
      ],
      "required_features": [],
      "parameters": [],
      "file": "frontend/app/api/user/profile/route.ts"
    },
    {
      "path": "/api/user/update-login",
      "methods": [
        "POST"
      ],
      "required_features": [],
      "parameters": [],
      "file": "frontend/app/api/user/update-login/route.ts"
    },
    {
      "path": "/api/user/cards",
      "methods": [
        "GET",
        "POST"
      ],
      "required_features": [],
      "parameters": [],
      "file": "frontend/app/api/user/cards/route.ts"
    },
    {
      "path": "/api/user/promote-if-verified",
      "methods": [
        "POST"
      ],
      "required_features": [],
      "parameters": [],
      "file": "frontend/app/api/user/promote-if-verified/route.ts"
    },
    {
      "path": "/api/notifications",
      "methods": [
        "GET",
        "PATCH"
      ],
      "required_features": [],
      "parameters": [],
      "file": "frontend/app/api/notifications/route.ts"
    },
    {
      "path": "/api/debug/config",
      "methods": [
        "GET"
      ],
      "required_features": [],
      "parameters": [],
      "file": "frontend/app/api/debug/config/route.ts"
    },
    {
      "path": "/api/insights",
      "methods": [
        "GET",
        "POST"
      ],
      "required_features": [],
      "parameters": [],
      "file": "frontend/app/api/insights/route.ts"
    }
  ],
  "feature_keys": [
    {
      "key": "admin_dashboard",
      "used_in": [
        "frontend/utils/rbac.ts"
      ]
    },
    {
      "key": "contact",
      "used_in": [
        "frontend/app/contact/page.tsx"
      ]
    },
    {
      "key": "games_page",
      "used_in": [
        "frontend/utils/hooks/useRequireFeature.tsx",
        "frontend/app/games/page.tsx"
      ]
    },
    {
      "key": "insights_page",
      "used_in": [
        "frontend/app/insights/page.tsx"
      ]
    },
    {
      "key": "profile_page",
      "used_in": [
        "frontend/app/profile/page.tsx"
      ]
    },
    {
      "key": "results_page",
      "used_in": [
        "frontend/app/results/page.tsx"
      ]
    }
  ],
  "components": [
    {
      "name": "Forbidden",
      "file": "frontend/app/components/Forbidden.tsx",
      "is_client": true,
      "props_interface": null
    },
    {
      "name": "AuthForm",
      "file": "frontend/app/components/AuthForm.tsx",
      "is_client": true,
      "props_interface": null
    },
    {
      "name": "EditUserModal",
      "file": "frontend/app/components/EditUserModal.tsx",
      "is_client": true,
      "props_interface": "EditUserModalProps"
    },
    {
      "name": "ConfirmModal",
      "file": "frontend/app/components/ConfirmModal.tsx",
      "is_client": true,
      "props_interface": "ConfirmModalProps"
    },
    {
      "name": "AdminUserTable",
      "file": "frontend/app/components/AdminUserTable.tsx",
      "is_client": true,
      "props_interface": null
    },
    {
      "name": "AdminGroupTable",
      "file": "frontend/app/components/AdminGroupTable.tsx",
      "is_client": true,
      "props_interface": null
    },
    {
      "name": "Navbar",
      "file": "frontend/app/components/Navbar.tsx",
      "is_client": true,
      "props_interface": null
    },
    {
      "name": "PageLayout",
      "file": "frontend/app/components/ui/PageLayout.tsx",
      "is_client": true,
      "props_interface": "PageLayoutProps"
    },
    {
      "name": "Card",
      "file": "frontend/app/components/ui/Cards.tsx",
      "is_client": true,
      "props_interface": "CardProps"
    },
    {
      "name": "UserInfoBox",
      "file": "frontend/app/components/ui/UserInfoBox.tsx",
      "is_client": true,
      "props_interface": null
    },
    {
      "name": "Sidebar",
      "file": "frontend/app/components/ui/Sidebar.tsx",
      "is_client": true,
      "props_interface": "SidebarProps"
    },
    {
      "name": "Icon",
      "file": "frontend/app/components/ui/Icon.tsx",
      "is_client": true,
      "props_interface": "IconProps"
    },
    {
      "name": "Button",
      "file": "frontend/app/components/ui/Buttons.tsx",
      "is_client": true,
      "props_interface": "ButtonProps"
    },
    {
      "name": "Spinner",
      "file": "frontend/app/components/ui/Spinner.tsx",
      "is_client": false,
      "props_interface": null
    },
    {
      "name": "Notification",
      "file": "frontend/app/components/ui/Notifications.tsx",
      "is_client": true,
      "props_interface": null
    },
    {
      "name": "Avatar",
      "file": "frontend/app/components/ui/Avatar.tsx",
      "is_client": true,
      "props_interface": null
    },
    {
      "name": "AdminUserTable",
      "file": "frontend/components/AdminUserTable.tsx",
      "is_client": true,
      "props_interface": null
    },
    {
      "name": "AdminGroupTable",
      "file": "frontend/components/AdminGroupTable.tsx",
      "is_client": true,
      "props_interface": null
    },
    {
      "name": "GroupsManager",
      "file": "frontend/components/admin/GroupsManager.tsx",
      "is_client": true,
      "props_interface": null
    },
    {
      "name": "FeaturesManager",
      "file": "frontend/components/admin/FeaturesManager.tsx",
      "is_client": true,
      "props_interface": null
    },
    {
      "name": "GroupMemberManager",
      "file": "frontend/components/admin/GroupMemberManager.tsx",
      "is_client": true,
      "props_interface": null
    },
    {
      "name": "GroupFeatureManager",
      "file": "frontend/components/admin/GroupFeatureManager.tsx",
      "is_client": true,
      "props_interface": "GroupFeatureManagerProps"
    }
  ],
  "hooks": [
    {
      "name": "useRequireFeature",
      "file": "frontend/utils/hooks/useRequireFeature.tsx",
      "purpose": "* Hook: Checks if user has the required featureKey permission.\n * Usage:\n *   const { allowed, loading, forbidden } = useRequireFeature('games_page');\n *   if (loading) return <Loading />;\n *   if (forbidden) return <Forbidden />;"
    },
    {
      "name": "useRequireFeature",
      "file": "frontend/utils/hooks/useRequireFeatureNew.tsx",
      "purpose": "* Enhanced hook for checking feature permissions using centralized auth\n * @param featureKey - The feature key to check\n * @param redirectOnFail - Whether to redirect to login if unauthorized (default: true)"
    },
    {
      "name": "useRequireAnyFeature",
      "file": "frontend/utils/hooks/useRequireFeatureNew.tsx",
      "purpose": "* Enhanced hook for checking feature permissions using centralized auth\n * @param featureKey - The feature key to check\n * @param redirectOnFail - Whether to redirect to login if unauthorized (default: true)"
    },
    {
      "name": "useRequireAdmin",
      "file": "frontend/utils/hooks/useRequireFeatureNew.tsx",
      "purpose": "* Enhanced hook for checking feature permissions using centralized auth\n * @param featureKey - The feature key to check\n * @param redirectOnFail - Whether to redirect to login if unauthorized (default: true)"
    },
    {
      "name": "usePageLoading",
      "file": "frontend/app/hooks/usePageLoading.ts",
      "purpose": null
    }
  ],
  "database_tables": [
    "access_group_features",
    "access_groups",
    "draws",
    "features",
    "games",
    "insight_templates",
    "nav_items",
    "notifications",
    "results",
    "user_access_groups",
    "user_cards",
    "users"
  ],
  "type_definitions": [
    {
      "kind": "interface",
      "name": "ApiSuccessResponse",
      "file": "frontend/utils/api-handler.ts",
      "exported": true,
      "properties": [
        {
          "name": "data",
          "type": "T",
          "optional": false
        },
        {
          "name": "message",
          "type": "string",
          "optional": true
        },
        {
          "name": "status",
          "type": "'success'",
          "optional": false
        }
      ]
    },
    {
      "kind": "interface",
      "name": "ApiErrorResponse",
      "file": "frontend/utils/api-handler.ts",
      "exported": true,
      "properties": [
        {
          "name": "error",
          "type": "string",
          "optional": false
        },
        {
          "name": "status",
          "type": "'error'",
          "optional": false
        },
        {
          "name": "code",
          "type": "string",
          "optional": true
        }
      ]
    },
    {
      "kind": "type",
      "name": "ApiResponse",
      "file": "frontend/utils/api-handler.ts",
      "exported": true,
      "value": "ApiSuccessResponse<T> | ApiErrorResponse"
    },
    {
      "kind": "type",
      "name": "UserProfile",
      "file": "frontend/utils/types.ts",
      "exported": true,
      "value": "{\n  id: string"
    },
    {
      "kind": "type",
      "name": "AccessGroup",
      "file": "frontend/utils/types.ts",
      "exported": true,
      "value": "{\n  id: number"
    },
    {
      "kind": "type",
      "name": "UserAccessGroup",
      "file": "frontend/utils/types.ts",
      "exported": true,
      "value": "{\n  user_id: string"
    },
    {
      "kind": "type",
      "name": "Feature",
      "file": "frontend/utils/types.ts",
      "exported": true,
      "value": "{\n  id: number"
    },
    {
      "kind": "type",
      "name": "AccessGroupFeature",
      "file": "frontend/utils/types.ts",
      "exported": true,
      "value": "{\n  group_id: number"
    },
    {
      "kind": "type",
      "name": "Database",
      "file": "frontend/utils/types.ts",
      "exported": true,
      "value": "{\n  public: {\n    Tables: {\n      users: {\n        Row: UserProfile"
    },
    {
      "kind": "interface",
      "name": "ApiResponse",
      "file": "frontend/utils/api-client.ts",
      "exported": true,
      "properties": [
        {
          "name": "data",
          "type": "T",
          "optional": true
        },
        {
          "name": "error",
          "type": "string",
          "optional": true
        },
        {
          "name": "status",
          "type": "number",
          "optional": false
        }
      ]
    },
    {
      "kind": "interface",
      "name": "ApiErrorHandler",
      "file": "frontend/utils/api-client.ts",
      "exported": true,
      "properties": [
        {
          "name": "onApiError",
          "type": "(error: string, status: number) => void",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "CacheItem",
      "file": "frontend/utils/cache.ts",
      "exported": false,
      "properties": [
        {
          "name": "data",
          "type": "T",
          "optional": false
        },
        {
          "name": "timestamp",
          "type": "number",
          "optional": false
        },
        {
          "name": "expiry",
          "type": "number",
          "optional": false
        }
      ]
    },
    {
      "kind": "interface",
      "name": "PageProps",
      "file": "frontend/.next/types/app/page.ts",
      "exported": true,
      "properties": [
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        },
        {
          "name": "searchParams",
          "type": "Promise<any>",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "LayoutProps",
      "file": "frontend/.next/types/app/page.ts",
      "exported": true,
      "properties": [
        {
          "name": "children",
          "type": "React.ReactNode",
          "optional": true
        },
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "PageProps",
      "file": "frontend/.next/types/app/admin/page.ts",
      "exported": true,
      "properties": [
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        },
        {
          "name": "searchParams",
          "type": "Promise<any>",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "LayoutProps",
      "file": "frontend/.next/types/app/admin/page.ts",
      "exported": true,
      "properties": [
        {
          "name": "children",
          "type": "React.ReactNode",
          "optional": true
        },
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "PageProps",
      "file": "frontend/.next/types/app/manage-users/page.ts",
      "exported": true,
      "properties": [
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        },
        {
          "name": "searchParams",
          "type": "Promise<any>",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "LayoutProps",
      "file": "frontend/.next/types/app/manage-users/page.ts",
      "exported": true,
      "properties": [
        {
          "name": "children",
          "type": "React.ReactNode",
          "optional": true
        },
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "PageProps",
      "file": "frontend/.next/types/app/results/page.ts",
      "exported": true,
      "properties": [
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        },
        {
          "name": "searchParams",
          "type": "Promise<any>",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "LayoutProps",
      "file": "frontend/.next/types/app/results/page.ts",
      "exported": true,
      "properties": [
        {
          "name": "children",
          "type": "React.ReactNode",
          "optional": true
        },
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "PageProps",
      "file": "frontend/.next/types/app/games/page.ts",
      "exported": true,
      "properties": [
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        },
        {
          "name": "searchParams",
          "type": "Promise<any>",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "LayoutProps",
      "file": "frontend/.next/types/app/games/page.ts",
      "exported": true,
      "properties": [
        {
          "name": "children",
          "type": "React.ReactNode",
          "optional": true
        },
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "PageProps",
      "file": "frontend/.next/types/app/profile/page.ts",
      "exported": true,
      "properties": [
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        },
        {
          "name": "searchParams",
          "type": "Promise<any>",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "LayoutProps",
      "file": "frontend/.next/types/app/profile/page.ts",
      "exported": true,
      "properties": [
        {
          "name": "children",
          "type": "React.ReactNode",
          "optional": true
        },
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "PageProps",
      "file": "frontend/.next/types/app/contact/page.ts",
      "exported": true,
      "properties": [
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        },
        {
          "name": "searchParams",
          "type": "Promise<any>",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "LayoutProps",
      "file": "frontend/.next/types/app/contact/page.ts",
      "exported": true,
      "properties": [
        {
          "name": "children",
          "type": "React.ReactNode",
          "optional": true
        },
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "PageProps",
      "file": "frontend/.next/types/app/draws/page.ts",
      "exported": true,
      "properties": [
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        },
        {
          "name": "searchParams",
          "type": "Promise<any>",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "LayoutProps",
      "file": "frontend/.next/types/app/draws/page.ts",
      "exported": true,
      "properties": [
        {
          "name": "children",
          "type": "React.ReactNode",
          "optional": true
        },
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "PageProps",
      "file": "frontend/.next/types/app/dashboard/page.ts",
      "exported": true,
      "properties": [
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        },
        {
          "name": "searchParams",
          "type": "Promise<any>",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "LayoutProps",
      "file": "frontend/.next/types/app/dashboard/page.ts",
      "exported": true,
      "properties": [
        {
          "name": "children",
          "type": "React.ReactNode",
          "optional": true
        },
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "PageProps",
      "file": "frontend/.next/types/app/login/page.ts",
      "exported": true,
      "properties": [
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        },
        {
          "name": "searchParams",
          "type": "Promise<any>",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "LayoutProps",
      "file": "frontend/.next/types/app/login/page.ts",
      "exported": true,
      "properties": [
        {
          "name": "children",
          "type": "React.ReactNode",
          "optional": true
        },
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "PageProps",
      "file": "frontend/.next/types/app/insights/page.ts",
      "exported": true,
      "properties": [
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        },
        {
          "name": "searchParams",
          "type": "Promise<any>",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "LayoutProps",
      "file": "frontend/.next/types/app/insights/page.ts",
      "exported": true,
      "properties": [
        {
          "name": "children",
          "type": "React.ReactNode",
          "optional": true
        },
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "PageProps",
      "file": "frontend/.next/types/app/admin/groups/page.ts",
      "exported": true,
      "properties": [
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        },
        {
          "name": "searchParams",
          "type": "Promise<any>",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "LayoutProps",
      "file": "frontend/.next/types/app/admin/groups/page.ts",
      "exported": true,
      "properties": [
        {
          "name": "children",
          "type": "React.ReactNode",
          "optional": true
        },
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "PageProps",
      "file": "frontend/.next/types/app/admin/features/page.ts",
      "exported": true,
      "properties": [
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        },
        {
          "name": "searchParams",
          "type": "Promise<any>",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "LayoutProps",
      "file": "frontend/.next/types/app/admin/features/page.ts",
      "exported": true,
      "properties": [
        {
          "name": "children",
          "type": "React.ReactNode",
          "optional": true
        },
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "PageProps",
      "file": "frontend/.next/types/app/admin/users/page.ts",
      "exported": true,
      "properties": [
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        },
        {
          "name": "searchParams",
          "type": "Promise<any>",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "LayoutProps",
      "file": "frontend/.next/types/app/admin/users/page.ts",
      "exported": true,
      "properties": [
        {
          "name": "children",
          "type": "React.ReactNode",
          "optional": true
        },
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "PageProps",
      "file": "frontend/.next/types/app/auth/callback/page.ts",
      "exported": true,
      "properties": [
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        },
        {
          "name": "searchParams",
          "type": "Promise<any>",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "LayoutProps",
      "file": "frontend/.next/types/app/auth/callback/page.ts",
      "exported": true,
      "properties": [
        {
          "name": "children",
          "type": "React.ReactNode",
          "optional": true
        },
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "PageProps",
      "file": "frontend/.next/types/app/auth/resend-confirmation/page.ts",
      "exported": true,
      "properties": [
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        },
        {
          "name": "searchParams",
          "type": "Promise<any>",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "LayoutProps",
      "file": "frontend/.next/types/app/auth/resend-confirmation/page.ts",
      "exported": true,
      "properties": [
        {
          "name": "children",
          "type": "React.ReactNode",
          "optional": true
        },
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "PageProps",
      "file": "frontend/.next/types/app/api/results/route.ts",
      "exported": true,
      "properties": [
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        },
        {
          "name": "searchParams",
          "type": "Promise<any>",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "LayoutProps",
      "file": "frontend/.next/types/app/api/results/route.ts",
      "exported": true,
      "properties": [
        {
          "name": "children",
          "type": "React.ReactNode",
          "optional": true
        },
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "PageProps",
      "file": "frontend/.next/types/app/api/games/route.ts",
      "exported": true,
      "properties": [
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        },
        {
          "name": "searchParams",
          "type": "Promise<any>",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "LayoutProps",
      "file": "frontend/.next/types/app/api/games/route.ts",
      "exported": true,
      "properties": [
        {
          "name": "children",
          "type": "React.ReactNode",
          "optional": true
        },
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "PageProps",
      "file": "frontend/.next/types/app/api/access-groups/route.ts",
      "exported": true,
      "properties": [
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        },
        {
          "name": "searchParams",
          "type": "Promise<any>",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "LayoutProps",
      "file": "frontend/.next/types/app/api/access-groups/route.ts",
      "exported": true,
      "properties": [
        {
          "name": "children",
          "type": "React.ReactNode",
          "optional": true
        },
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "PageProps",
      "file": "frontend/.next/types/app/api/ping/route.ts",
      "exported": true,
      "properties": [
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        },
        {
          "name": "searchParams",
          "type": "Promise<any>",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "LayoutProps",
      "file": "frontend/.next/types/app/api/ping/route.ts",
      "exported": true,
      "properties": [
        {
          "name": "children",
          "type": "React.ReactNode",
          "optional": true
        },
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "PageProps",
      "file": "frontend/.next/types/app/api/draws/route.ts",
      "exported": true,
      "properties": [
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        },
        {
          "name": "searchParams",
          "type": "Promise<any>",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "LayoutProps",
      "file": "frontend/.next/types/app/api/draws/route.ts",
      "exported": true,
      "properties": [
        {
          "name": "children",
          "type": "React.ReactNode",
          "optional": true
        },
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "PageProps",
      "file": "frontend/.next/types/app/api/uploads/route.ts",
      "exported": true,
      "properties": [
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        },
        {
          "name": "searchParams",
          "type": "Promise<any>",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "LayoutProps",
      "file": "frontend/.next/types/app/api/uploads/route.ts",
      "exported": true,
      "properties": [
        {
          "name": "children",
          "type": "React.ReactNode",
          "optional": true
        },
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "PageProps",
      "file": "frontend/.next/types/app/api/dashboard/route.ts",
      "exported": true,
      "properties": [
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        },
        {
          "name": "searchParams",
          "type": "Promise<any>",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "LayoutProps",
      "file": "frontend/.next/types/app/api/dashboard/route.ts",
      "exported": true,
      "properties": [
        {
          "name": "children",
          "type": "React.ReactNode",
          "optional": true
        },
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "PageProps",
      "file": "frontend/.next/types/app/api/notifications/route.ts",
      "exported": true,
      "properties": [
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        },
        {
          "name": "searchParams",
          "type": "Promise<any>",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "LayoutProps",
      "file": "frontend/.next/types/app/api/notifications/route.ts",
      "exported": true,
      "properties": [
        {
          "name": "children",
          "type": "React.ReactNode",
          "optional": true
        },
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "PageProps",
      "file": "frontend/.next/types/app/api/insights/route.ts",
      "exported": true,
      "properties": [
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        },
        {
          "name": "searchParams",
          "type": "Promise<any>",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "LayoutProps",
      "file": "frontend/.next/types/app/api/insights/route.ts",
      "exported": true,
      "properties": [
        {
          "name": "children",
          "type": "React.ReactNode",
          "optional": true
        },
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "PageProps",
      "file": "frontend/.next/types/app/api/admin/groups/route.ts",
      "exported": true,
      "properties": [
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        },
        {
          "name": "searchParams",
          "type": "Promise<any>",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "LayoutProps",
      "file": "frontend/.next/types/app/api/admin/groups/route.ts",
      "exported": true,
      "properties": [
        {
          "name": "children",
          "type": "React.ReactNode",
          "optional": true
        },
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "PageProps",
      "file": "frontend/.next/types/app/api/admin/group-features/route.ts",
      "exported": true,
      "properties": [
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        },
        {
          "name": "searchParams",
          "type": "Promise<any>",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "LayoutProps",
      "file": "frontend/.next/types/app/api/admin/group-features/route.ts",
      "exported": true,
      "properties": [
        {
          "name": "children",
          "type": "React.ReactNode",
          "optional": true
        },
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "PageProps",
      "file": "frontend/.next/types/app/api/admin/features/route.ts",
      "exported": true,
      "properties": [
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        },
        {
          "name": "searchParams",
          "type": "Promise<any>",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "LayoutProps",
      "file": "frontend/.next/types/app/api/admin/features/route.ts",
      "exported": true,
      "properties": [
        {
          "name": "children",
          "type": "React.ReactNode",
          "optional": true
        },
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "PageProps",
      "file": "frontend/.next/types/app/api/admin/users/route.ts",
      "exported": true,
      "properties": [
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        },
        {
          "name": "searchParams",
          "type": "Promise<any>",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "LayoutProps",
      "file": "frontend/.next/types/app/api/admin/users/route.ts",
      "exported": true,
      "properties": [
        {
          "name": "children",
          "type": "React.ReactNode",
          "optional": true
        },
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "PageProps",
      "file": "frontend/.next/types/app/api/admin/insight-templates/route.ts",
      "exported": true,
      "properties": [
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        },
        {
          "name": "searchParams",
          "type": "Promise<any>",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "LayoutProps",
      "file": "frontend/.next/types/app/api/admin/insight-templates/route.ts",
      "exported": true,
      "properties": [
        {
          "name": "children",
          "type": "React.ReactNode",
          "optional": true
        },
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "PageProps",
      "file": "frontend/.next/types/app/api/admin/group-members/route.ts",
      "exported": true,
      "properties": [
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        },
        {
          "name": "searchParams",
          "type": "Promise<any>",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "LayoutProps",
      "file": "frontend/.next/types/app/api/admin/group-members/route.ts",
      "exported": true,
      "properties": [
        {
          "name": "children",
          "type": "React.ReactNode",
          "optional": true
        },
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "PageProps",
      "file": "frontend/.next/types/app/api/user/nav/route.ts",
      "exported": true,
      "properties": [
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        },
        {
          "name": "searchParams",
          "type": "Promise<any>",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "LayoutProps",
      "file": "frontend/.next/types/app/api/user/nav/route.ts",
      "exported": true,
      "properties": [
        {
          "name": "children",
          "type": "React.ReactNode",
          "optional": true
        },
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "PageProps",
      "file": "frontend/.next/types/app/api/user/features/route.ts",
      "exported": true,
      "properties": [
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        },
        {
          "name": "searchParams",
          "type": "Promise<any>",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "LayoutProps",
      "file": "frontend/.next/types/app/api/user/features/route.ts",
      "exported": true,
      "properties": [
        {
          "name": "children",
          "type": "React.ReactNode",
          "optional": true
        },
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "PageProps",
      "file": "frontend/.next/types/app/api/user/profile/route.ts",
      "exported": true,
      "properties": [
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        },
        {
          "name": "searchParams",
          "type": "Promise<any>",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "LayoutProps",
      "file": "frontend/.next/types/app/api/user/profile/route.ts",
      "exported": true,
      "properties": [
        {
          "name": "children",
          "type": "React.ReactNode",
          "optional": true
        },
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "PageProps",
      "file": "frontend/.next/types/app/api/user/update-login/route.ts",
      "exported": true,
      "properties": [
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        },
        {
          "name": "searchParams",
          "type": "Promise<any>",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "LayoutProps",
      "file": "frontend/.next/types/app/api/user/update-login/route.ts",
      "exported": true,
      "properties": [
        {
          "name": "children",
          "type": "React.ReactNode",
          "optional": true
        },
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "PageProps",
      "file": "frontend/.next/types/app/api/user/cards/route.ts",
      "exported": true,
      "properties": [
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        },
        {
          "name": "searchParams",
          "type": "Promise<any>",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "LayoutProps",
      "file": "frontend/.next/types/app/api/user/cards/route.ts",
      "exported": true,
      "properties": [
        {
          "name": "children",
          "type": "React.ReactNode",
          "optional": true
        },
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "PageProps",
      "file": "frontend/.next/types/app/api/user/promote-if-verified/route.ts",
      "exported": true,
      "properties": [
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        },
        {
          "name": "searchParams",
          "type": "Promise<any>",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "LayoutProps",
      "file": "frontend/.next/types/app/api/user/promote-if-verified/route.ts",
      "exported": true,
      "properties": [
        {
          "name": "children",
          "type": "React.ReactNode",
          "optional": true
        },
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "PageProps",
      "file": "frontend/.next/types/app/api/debug/config/route.ts",
      "exported": true,
      "properties": [
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        },
        {
          "name": "searchParams",
          "type": "Promise<any>",
          "optional": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "LayoutProps",
      "file": "frontend/.next/types/app/api/debug/config/route.ts",
      "exported": true,
      "properties": [
        {
          "name": "children",
          "type": "React.ReactNode",
          "optional": true
        },
        {
          "name": "params",
          "type": "Promise<SegmentParams>",
          "optional": true
        }
      ]
    },
    {
      "kind": "type",
      "name": "User",
      "file": "frontend/components/AdminUserTable.tsx",
      "exported": false,
      "value": "{\n  id: string"
    },
    {
      "kind": "type",
      "name": "Group",
      "file": "frontend/components/AdminGroupTable.tsx",
      "exported": false,
      "value": "{\n  id: number"
    },
    {
      "kind": "interface",
      "name": "AuthState",
      "file": "frontend/context/AuthContext.tsx",
      "exported": false,
      "properties": [
        {
          "name": "user",
          "type": "User | null",
          "optional": false
        },
        {
          "name": "session",
          "type": "Session | null",
          "optional": false
        },
        {
          "name": "features",
          "type": "string[]",
          "optional": false
        },
        {
          "name": "loading",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "initialized",
          "type": "boolean",
          "optional": false
        }
      ]
    },
    {
      "kind": "type",
      "name": "AccessGroup",
      "file": "frontend/components/admin/GroupsManager.tsx",
      "exported": false,
      "value": "{\n  id: number"
    },
    {
      "kind": "type",
      "name": "Feature",
      "file": "frontend/components/admin/FeaturesManager.tsx",
      "exported": false,
      "value": "{\n  id: number"
    },
    {
      "kind": "type",
      "name": "User",
      "file": "frontend/components/admin/GroupMemberManager.tsx",
      "exported": false,
      "value": "{ id: string"
    },
    {
      "kind": "type",
      "name": "Group",
      "file": "frontend/components/admin/GroupMemberManager.tsx",
      "exported": false,
      "value": "{ id: number"
    },
    {
      "kind": "type",
      "name": "Assignment",
      "file": "frontend/components/admin/GroupMemberManager.tsx",
      "exported": false,
      "value": "{ user_id: string"
    },
    {
      "kind": "type",
      "name": "AccessGroup",
      "file": "frontend/components/admin/GroupFeatureManager.tsx",
      "exported": false,
      "value": "{\n  id: number"
    },
    {
      "kind": "type",
      "name": "Feature",
      "file": "frontend/components/admin/GroupFeatureManager.tsx",
      "exported": false,
      "value": "{\n  id: number"
    },
    {
      "kind": "type",
      "name": "GroupFeatureManagerProps",
      "file": "frontend/components/admin/GroupFeatureManager.tsx",
      "exported": false,
      "value": "{\n  group: AccessGroup"
    },
    {
      "kind": "type",
      "name": "Tab",
      "file": "frontend/app/components/AuthForm.tsx",
      "exported": false,
      "value": "'login' | 'register' | 'forgot'"
    },
    {
      "kind": "interface",
      "name": "EditUserModalProps",
      "file": "frontend/app/components/EditUserModal.tsx",
      "exported": false,
      "properties": [
        {
          "name": "user",
          "type": "UserProfile | null",
          "optional": false
        },
        {
          "name": "groups",
          "type": "Group[]",
          "optional": false
        },
        {
          "name": "isOpen",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "onClose",
          "type": "() => void",
          "optional": false
        },
        {
          "name": "onSave",
          "type": "(user: UserProfile) => void",
          "optional": false
        }
      ]
    },
    {
      "kind": "type",
      "name": "AuthContextType",
      "file": "frontend/app/components/AuthProvider.tsx",
      "exported": false,
      "value": "{\n  user: User | null"
    },
    {
      "kind": "interface",
      "name": "ConfirmModalProps",
      "file": "frontend/app/components/ConfirmModal.tsx",
      "exported": false,
      "properties": [
        {
          "name": "isOpen",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "onClose",
          "type": "() => void",
          "optional": false
        },
        {
          "name": "onConfirm",
          "type": "() => void",
          "optional": false
        },
        {
          "name": "title",
          "type": "string",
          "optional": false
        },
        {
          "name": "message",
          "type": "ReactNode",
          "optional": false
        }
      ]
    },
    {
      "kind": "type",
      "name": "User",
      "file": "frontend/app/components/AdminUserTable.tsx",
      "exported": false,
      "value": "{\n  id: string"
    },
    {
      "kind": "type",
      "name": "Group",
      "file": "frontend/app/components/AdminGroupTable.tsx",
      "exported": false,
      "value": "{\n  id: number"
    },
    {
      "kind": "type",
      "name": "NavItem",
      "file": "frontend/app/components/Navbar.tsx",
      "exported": false,
      "value": "{\n  key: string"
    },
    {
      "kind": "interface",
      "name": "Feature",
      "file": "frontend/app/admin/features/FeatureManagementClient.tsx",
      "exported": false,
      "properties": [
        {
          "name": "id",
          "type": "number",
          "optional": false
        },
        {
          "name": "key",
          "type": "string",
          "optional": false
        },
        {
          "name": "name",
          "type": "string",
          "optional": false
        },
        {
          "name": "description",
          "type": "string | null",
          "optional": false
        },
        {
          "name": "type",
          "type": "string",
          "optional": false
        },
        {
          "name": "nav_name",
          "type": "string | null",
          "optional": false
        },
        {
          "name": "icon_url",
          "type": "string | null",
          "optional": false
        },
        {
          "name": "url",
          "type": "string | null",
          "optional": false
        },
        {
          "name": "order",
          "type": "number",
          "optional": false
        },
        {
          "name": "active",
          "type": "boolean",
          "optional": false
        }
      ]
    },
    {
      "kind": "interface",
      "name": "AccessGroup",
      "file": "frontend/app/admin/features/FeatureManagementClient.tsx",
      "exported": false,
      "properties": [
        {
          "name": "id",
          "type": "number",
          "optional": false
        },
        {
          "name": "name",
          "type": "string",
          "optional": false
        },
        {
          "name": "description",
          "type": "string | null",
          "optional": false
        }
      ]
    },
    {
      "kind": "interface",
      "name": "PageLayoutProps",
      "file": "frontend/app/components/ui/PageLayout.tsx",
      "exported": false,
      "properties": [
        {
          "name": "children",
          "type": "React.ReactNode",
          "optional": false
        },
        {
          "name": "title",
          "type": "string",
          "optional": false
        },
        {
          "name": "icon",
          "type": "React.ReactNode",
          "optional": true
        },
        {
          "name": "maxWidth",
          "type": "'sm' | 'md' | 'lg' | 'xl' | '2xl' | 'full'",
          "optional": true
        },
        {
          "name": "padding",
          "type": "'sm' | 'md' | 'lg'",
          "optional": true
        },
        {
          "name": "minHeight",
          "type": "string",
          "optional": true
        }
      ]
    },
    {
      "kind": "type",
      "name": "CardProps",
      "file": "frontend/app/components/ui/Cards.tsx",
      "exported": false,
      "value": "React.PropsWithChildren<{\n  title?: string"
    },
    {
      "kind": "interface",
      "name": "UserInfo",
      "file": "frontend/app/components/ui/UserInfoBox.tsx",
      "exported": false,
      "properties": [
        {
          "name": "email",
          "type": "string",
          "optional": false
        },
        {
          "name": "username",
          "type": "string",
          "optional": true
        },
        {
          "name": "groups",
          "type": "string[]",
          "optional": false
        },
        {
          "name": "previousLoginAt",
          "type": "string",
          "optional": true
        },
        {
          "name": "createdAt",
          "type": "string",
          "optional": false
        },
        {
          "name": "loginCount",
          "type": "number",
          "optional": false
        }
      ]
    },
    {
      "kind": "interface",
      "name": "SidebarProps",
      "file": "frontend/app/components/ui/Sidebar.tsx",
      "exported": false,
      "properties": [
        {
          "name": "isCollapsed",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "onToggle",
          "type": "() => void",
          "optional": false
        },
        {
          "name": "isMobile",
          "type": "boolean",
          "optional": true
        }
      ]
    },
    {
      "kind": "type",
      "name": "NavItem",
      "file": "frontend/app/components/ui/Sidebar.tsx",
      "exported": false,
      "value": "{\n  key: string"
    },
    {
      "kind": "type",
      "name": "IconProps",
      "file": "frontend/app/components/ui/Icon.tsx",
      "exported": false,
      "value": "{\n  name: string"
    },
    {
      "kind": "type",
      "name": "ButtonProps",
      "file": "frontend/app/components/ui/Buttons.tsx",
      "exported": true,
      "value": "React.ButtonHTMLAttributes<HTMLButtonElement> & {\n  variant?: 'primary' | 'secondary' | 'outline' | 'danger'"
    }
  ],
  "component_dependencies": {
    "AdminUserTable": [],
    "AdminGroupTable": [],
    "AuthProvider": [],
    "HomePage": [
      "AuthForm"
    ],
    "RootLayout": [
      "UserInfoBox",
      "ThemeProvider",
      "Sidebar"
    ],
    "Loading": [
      "Spinner"
    ],
    "useRequireFeature": [],
    "GroupsManager": [],
    "FeaturesManager": [],
    "GroupMemberManager": [],
    "GroupFeatureManager": [],
    "ApiErrorNotification": [],
    "AdminPage": [],
    "UsersPage": [
      "UserManagementClient"
    ],
    "Forbidden": [],
    "AuthForm": [
      "Icon",
      "Button",
      "Card"
    ],
    "EditUserModal": [],
    "ConfirmModal": [],
    "Navbar": [],
    "ResultsPage": [
      "Icon",
      "Spinner",
      "Forbidden",
      "Card"
    ],
    "GamesPage": [
      "Icon",
      "Spinner",
      "Forbidden",
      "Card"
    ],
    "ProfilePage": [
      "Icon",
      "PageLayout",
      "Spinner",
      "Forbidden"
    ],
    "ContactPage": [
      "Icon",
      "PageLayout",
      "Spinner",
      "Forbidden"
    ],
    "DrawsPage": [
      "Icon",
      "Spinner",
      "Forbidden",
      "Card"
    ],
    "DashboardPage": [
      "Icon",
      "PageLayout",
      "Spinner",
      "Forbidden",
      "Card"
    ],
    "LoginPage": [
      "AuthForm"
    ],
    "InsightsPage": [
      "Icon",
      "Spinner",
      "Card"
    ],
    "GroupsPage": [],
    "FeatureManagementClient": [
      "ConfirmModal"
    ],
    "AdminFeaturesPage": [
      "FeatureManagementClient"
    ],
    "UserManagementClient": [
      "ConfirmModal"
    ],
    "PageLayout": [
      "Card"
    ],
    "Card": [],
    "UserInfoBox": [
      "Icon",
      "Avatar"
    ],
    "ThemeProvider": [],
    "Sidebar": [
      "Icon"
    ],
    "Icon": [],
    "Button": [],
    "Spinner": [],
    "Notification": [],
    "Avatar": [],
    "AuthCallbackPage": [],
    "ResendConfirmation": []
  },
  "api_usage": {
    "/api/user/nav": [
      {
        "file": "frontend/utils/prefetch.ts",
        "function": null,
        "snippet": "prefetchCriticalData() {\n  const promises = [];\n\n  // Prefetch navigation data\n  promises.push(\n    fetch('/api/user/nav', { credentials: 'include' })\n      .then(res => res.json())\n      .then(data => {\n        if (Array"
      },
      {
        "file": "frontend/app/components/Navbar.tsx",
        "function": null,
        "snippet": "();\n    if (data?.user) {\n      setUser({ email: data.user.email ?? '' });\n      const resp = await fetch('/api/user/nav', { credentials: 'include' });\n      const navRes = await resp.json();\n      setNavLinks(Array.isArr"
      },
      {
        "file": "frontend/app/components/ui/Sidebar.tsx",
        "function": null,
        "snippet": "achedData) {\n      setNavLinks(cachedData);\n      return;\n    }\n\n    try {\n      const resp = await fetch('/api/user/nav', { credentials: 'include' });\n      const navRes = await resp.json();\n      const navData = Array.i"
      },
      {
        "file": "frontend/.next/static/chunks/app/layout-235adcef0db21d5a.js",
        "function": null,
        "snippet": "e)(!1);async function f(){let e=\"user-nav-links\",t=l.E.get(e);if(t)return void p(t);try{let t=await fetch(\"/api/user/nav\",{credentials:\"include\"}),r=await t.json(),n=Array.isArray(r.nav)?r.nav:[];console.log(\"Navigation d"
      },
      {
        "file": "frontend/.next/static/chunks/app/layout-235adcef0db21d5a.js",
        "function": null,
        "snippet": "top:0,left:0,right:0,bottom:0,zIndex:1e3},onClick:()=>l(!1)})]})}async function p(){let e=[];e.push(fetch(\"/api/user/nav\",{credentials:\"include\"}).then(e=>e.json()).then(e=>{Array.isArray(e.nav)&&l.E.set(\"user-nav-links\","
      }
    ],
    "/api/user/features": [
      {
        "file": "frontend/utils/prefetch.ts",
        "function": null,
        "snippet": "}\n      })\n      .catch(console.error)\n  );\n\n  // Prefetch user features data\n  promises.push(\n    fetch('/api/user/features', { credentials: 'include' })\n      .then(res => res.json())\n      .then(data => {\n        if (Array"
      },
      {
        "file": "frontend/context/AuthContext.tsx",
        "function": null,
        "snippet": "E_DURATION) {\n      return featureCache.features;\n    }\n    \n    try {\n      const response = await fetch('/api/user/features', {\n        credentials: 'include',\n        headers: {\n          'Cache-Control': 'no-cache',"
      },
      {
        "file": "frontend/utils/hooks/useRequireFeature.tsx",
        "function": null,
        "snippet": ";\n        return;\n      }\n\n      try {\n        // Fetch allowed features\n        const resp = await fetch('/api/user/features');\n        const { features } = await resp.json();\n\n        if (!features?.includes(featureKey)) {"
      },
      {
        "file": "frontend/app/draws/page.tsx",
        "function": null,
        "snippet": "}\n        setLoading(false);\n        return;\n      }\n\n      try {\n        const resp = await fetch('/api/user/features');\n        const { features } = await resp.json();\n\n        if (features?.includes('draws_page')) {"
      },
      {
        "file": "frontend/app/dashboard/page.tsx",
        "function": null,
        "snippet": "se);\n        return;\n      }\n\n      try {\n        // Fetch user features\n        const resp = await fetch('/api/user/features');\n        const featuresData = await resp.json();\n        const userFeatures = Array.isArray(featur"
      },
      {
        "file": "frontend/.next/static/chunks/app/layout-235adcef0db21d5a.js",
        "function": null,
        "snippet": ".then(e=>{Array.isArray(e.cards)&&l.E.set(\"admin-cards\",e.cards,3e4)}).catch(console.error)),e.push(fetch(\"/api/user/features\",{credentials:\"include\"}).then(e=>e.json()).then(e=>{Array.isArray(e.features)&&l.E.set(\"user-featur"
      },
      {
        "file": "frontend/.next/static/chunks/app/results/page-45fe96cbe3c5db7c.js",
        "function": null,
        "snippet": "features\",a=l.E.get(r);if(a){a.includes(e)?(n(!0),o(!1)):(n(!1),o(!0)),c(!1);return}try{let t=await fetch(\"/api/user/features\"),{features:s}=await t.json();if(!(null==s?void 0:s.includes(e))){n(!1),o(!0),c(!1);return}l.E.set(r"
      },
      {
        "file": "frontend/.next/static/chunks/app/games/page-954d9f75d2d0fc06.js",
        "function": null,
        "snippet": "features\",r=n.E.get(a);if(r){r.includes(e)?(l(!0),o(!1)):(l(!1),o(!0)),c(!1);return}try{let t=await fetch(\"/api/user/features\"),{features:s}=await t.json();if(!(null==s?void 0:s.includes(e))){l(!1),o(!0),c(!1);return}n.E.set(a"
      },
      {
        "file": "frontend/.next/static/chunks/app/profile/page-78ed374eca960c9e.js",
        "function": null,
        "snippet": "features\",l=n.E.get(a);if(l){l.includes(e)?(i(!0),d(!1)):(i(!1),d(!0)),u(!1);return}try{let t=await fetch(\"/api/user/features\"),{features:s}=await t.json();if(!(null==s?void 0:s.includes(e))){i(!1),d(!0),u(!1);return}n.E.set(a"
      },
      {
        "file": "frontend/.next/static/chunks/app/contact/page-7a267389f398371d.js",
        "function": null,
        "snippet": "features\",l=r.E.get(a);if(l){l.includes(e)?(c(!0),o(!1)):(c(!1),o(!0)),u(!1);return}try{let t=await fetch(\"/api/user/features\"),{features:s}=await t.json();if(!(null==s?void 0:s.includes(e))){c(!1),o(!0),u(!1);return}r.E.set(a"
      },
      {
        "file": "frontend/.next/static/chunks/app/draws/page-62dddd84426e72ac.js",
        "function": null,
        "snippet": "t a=\"user-features\",r=n.E.get(a);if(r){r.includes(\"draws_page\")&&h(!0),s(!1);return}try{let e=await fetch(\"/api/user/features\"),{features:t}=await e.json();(null==t?void 0:t.includes(\"draws_page\"))&&h(!0),n.E.set(a,t||[],6e4)}"
      },
      {
        "file": "frontend/.next/static/chunks/app/dashboard/page-9e65e2c8a5cf45c7.js",
        "function": null,
        "snippet": "r-features\",t=i.E.get(a);if(t){t.includes(\"dashboard_page\")?j(t):g(!0),o(!1);return}try{let e=await fetch(\"/api/user/features\"),s=await e.json(),t=Array.isArray(s.features)?s.features:[];i.E.set(a,t,6e4),t.includes(\"dashboard_"
      },
      {
        "file": "frontend/.next/static/chunks/app/insights/page-0c78bc90ea5cdf2c.js",
        "function": null,
        "snippet": "features\",i=o.E.get(s);if(i){i.includes(e)?(l(!0),d(!1)):(l(!1),d(!0)),c(!1);return}try{let t=await fetch(\"/api/user/features\"),{features:r}=await t.json();if(!(null==r?void 0:r.includes(e))){l(!1),d(!0),c(!1);return}o.E.set(s"
      }
    ],
    "/api/user/cards": [
      {
        "file": "frontend/utils/prefetch.ts",
        "function": null,
        "snippet": "}\n      })\n      .catch(console.error)\n  );\n\n  // Prefetch user cards data\n  promises.push(\n    fetch('/api/user/cards', { credentials: 'include' })\n      .then(res => res.json())\n      .then(data => {\n        if (Array"
      },
      {
        "file": "frontend/.next/static/chunks/app/layout-235adcef0db21d5a.js",
        "function": null,
        "snippet": ").then(e=>{Array.isArray(e.nav)&&l.E.set(\"user-nav-links\",e.nav,6e4)}).catch(console.error)),e.push(fetch(\"/api/user/cards\",{credentials:\"include\"}).then(e=>e.json()).then(e=>{Array.isArray(e.cards)&&l.E.set(\"admin-cards\",e"
      }
    ],
    "/api/admin/users": [
      {
        "file": "frontend/components/AdminUserTable.tsx",
        "function": null,
        "snippet": "s] = useState<User[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    fetch('/api/admin/users')\n      .then((res) => res.json())\n      .then(({ users }) => setUsers(users || []))\n      .finally("
      },
      {
        "file": "frontend/components/admin/GroupMemberManager.tsx",
        "function": null,
        "snippet": "ll = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const usersRes = await fetch('/api/admin/users').then(r => r.json());\n      const groupsRes = await fetch('/api/admin/groups').then(r => r.json());"
      },
      {
        "file": "frontend/app/components/AdminUserTable.tsx",
        "function": null,
        "snippet": "s] = useState<User[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    fetch('/api/admin/users')\n      .then((res) => res.json())\n      .then(({ users }) => setUsers(users || []))\n      .finally("
      },
      {
        "file": "frontend/app/admin/users/UserManagementClient.tsx",
        "function": null,
        "snippet": "ng(true);\n      try {\n        const [usersResponse, groupsResponse] = await Promise.all([\n          fetch('/api/admin/users', { credentials: 'include' }),\n          fetch('/api/access-groups', { credentials: 'include' })"
      },
      {
        "file": "frontend/app/admin/users/UserManagementClient.tsx",
        "function": null,
        "snippet": "const fetchData = async () => {\n      setLoading(true);\n      try {\n        const response = await fetch('/api/admin/users', { credentials: 'include' });\n        if (!response.ok) {\n          throw new Error('Failed to refr"
      },
      {
        "file": "frontend/.next/static/chunks/1983-f9a00e7d3a30dbbf.js",
        "function": null,
        "snippet": "]=(0,a.useState)(null);(0,a.useEffect)(()=>{!async function(){k(!0);try{let[e,s]=await Promise.all([fetch(\"/api/admin/users\",{credentials:\"include\"}),fetch(\"/api/access-groups\",{credentials:\"include\"})]);if(403===e.status)th"
      },
      {
        "file": "frontend/.next/static/chunks/1983-f9a00e7d3a30dbbf.js",
        "function": null,
        "snippet": "(e,s)=>{z({type:e,message:s}),setTimeout(()=>z(null),5e3)},eo=()=>{(async()=>{k(!0);try{let e=await fetch(\"/api/admin/users\",{credentials:\"include\"});if(!e.ok)throw Error(\"Failed to refresh users\");let s=await e.json();t(s.u"
      },
      {
        "file": "frontend/.next/server/chunks/8693.js",
        "function": null,
        "snippet": "(a,b)=>{W({type:a,message:b}),setTimeout(()=>W(null),5e3)},ai=()=>{(async()=>{y(!0);try{let a=await fetch(\"/api/admin/users\",{credentials:\"include\"});if(!a.ok)throw Error(\"Failed to refresh users\");let b=await a.json();c(b.u"
      }
    ],
    "/api/admin/groups": [
      {
        "file": "frontend/components/AdminGroupTable.tsx",
        "function": null,
        "snippet": "] = useState<Group[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    fetch('/api/admin/groups')\n      .then((res) => res.json())\n      .then(({ groups }) => setGroups(groups || []))\n      .final"
      },
      {
        "file": "frontend/components/admin/GroupsManager.tsx",
        "function": null,
        "snippet": "ving] = useState(false);\n\n  // Fetch groups\n  const fetchGroups = () => {\n    setLoading(true);\n    fetch('/api/admin/groups')\n      .then((res) => res.json())\n      .then((data) => {\n        setGroups(Array.isArray(data.grou"
      },
      {
        "file": "frontend/components/admin/GroupsManager.tsx",
        "function": null,
        "snippet": "e.preventDefault();\n    setSaving(true);\n    setError(null);\n    try {\n      const res = await fetch('/api/admin/groups', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: J"
      },
      {
        "file": "frontend/components/admin/GroupMemberManager.tsx",
        "function": null,
        "snippet": "const usersRes = await fetch('/api/admin/users').then(r => r.json());\n      const groupsRes = await fetch('/api/admin/groups').then(r => r.json());\n      const assignmentsRes = await fetch('/api/admin/group-members').then(r ="
      },
      {
        "file": "frontend/app/components/AdminGroupTable.tsx",
        "function": null,
        "snippet": "] = useState<Group[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    fetch('/api/admin/groups')\n      .then((res) => res.json())\n      .then(({ groups }) => setGroups(groups || []))\n      .final"
      }
    ],
    "/api/user/update-login": [
      {
        "file": "frontend/context/AuthContext.tsx",
        "function": null,
        "snippet": "Features(session.user.id);\n        \n        // Update login timestamp\n        try {\n          await fetch('/api/user/update-login', { \n            method: 'POST',\n            credentials: 'include'\n          });\n        } catch (l"
      },
      {
        "file": "frontend/context/AuthContext.tsx",
        "function": null,
        "snippet": "res(data.session.user.id);\n        \n        // Update login timestamp\n        try {\n          await fetch('/api/user/update-login', { \n            method: 'POST',\n            credentials: 'include'\n          });\n        } catch (l"
      },
      {
        "file": "frontend/app/components/AuthForm.tsx",
        "function": null,
        "snippet": "in successful');\n              // Update login timestamps\n              try {\n                await fetch('/api/user/update-login', { method: 'POST' });\n              } catch (loginError) {\n                console.error('Failed to"
      },
      {
        "file": "frontend/app/components/AuthForm.tsx",
        "function": null,
        "snippet": "} else {\n            // Update login timestamps for new user\n            try {\n              await fetch('/api/user/update-login', { method: 'POST' });\n            } catch (loginError) {\n              console.error('Failed to upd"
      },
      {
        "file": "frontend/.next/static/chunks/8036-539fd13e1a4c1fd8.js",
        "function": null,
        "snippet": "\"Invalid email or password\"):E(o.message);else if(r.user){console.log(\"Login successful\");try{await fetch(\"/api/user/update-login\",{method:\"POST\"})}catch(e){console.error(\"Failed to update login timestamp:\",e)}e.replace(\"/dashboar"
      },
      {
        "file": "frontend/.next/static/chunks/8036-539fd13e1a4c1fd8.js",
        "function": null,
        "snippet": "firmed_at)N(\"Signup successful! Check your email to verify and sign in.\"),o(\"login\");else{try{await fetch(\"/api/user/update-login\",{method:\"POST\"})}catch(e){console.error(\"Failed to update login timestamp:\",e)}N(\"Signup successful"
      },
      {
        "file": "frontend/.next/server/chunks/7061.js",
        "function": null,
        "snippet": "\"Invalid email or password\"):I(c.message);else if(b.user){console.log(\"Login successful\");try{await fetch(\"/api/user/update-login\",{method:\"POST\"})}catch(a){console.error(\"Failed to update login timestamp:\",a)}a.replace(\"/dashboar"
      },
      {
        "file": "frontend/.next/server/chunks/7061.js",
        "function": null,
        "snippet": "firmed_at)G(\"Signup successful! Check your email to verify and sign in.\"),c(\"login\");else{try{await fetch(\"/api/user/update-login\",{method:\"POST\"})}catch(a){console.error(\"Failed to update login timestamp:\",a)}G(\"Signup successful"
      }
    ],
    "/api/user/promote-if-verified": [
      {
        "file": "frontend/app/page.tsx",
        "function": null,
        "snippet": "Safe: if already member or not verified, does nothing/bails quietly.\n        try {\n          await fetch('/api/user/promote-if-verified', { method: 'POST' });\n        } catch {\n          // No action needed if promotion API fails silent"
      },
      {
        "file": "frontend/.next/static/chunks/app/page-bf93a7638fbc9176.js",
        "function": null,
        "snippet": "ct)(()=>{!async function(){let{data:t}=await i.N.auth.getUser();if(null==t?void 0:t.user){try{await fetch(\"/api/user/promote-if-verified\",{method:\"POST\"})}catch(e){}e.replace(\"/dashboard\")}else a(!1)}();let{data:{subscription:t}}=i.N.aut"
      }
    ],
    "/api/admin/features": [
      {
        "file": "frontend/components/admin/FeaturesManager.tsx",
        "function": null,
        "snippet": "t [saving, setSaving] = useState(false);\n\n  const fetchFeatures = () => {\n    setLoading(true);\n    fetch('/api/admin/features')\n      .then(res => res.json())\n      .then(data => {\n        setFeatures(Array.isArray(data.featur"
      },
      {
        "file": "frontend/components/admin/FeaturesManager.tsx",
        "function": null,
        "snippet": "ingify({ key: form.key, name: form.name, description: form.description });\n\n      const res = await fetch('/api/admin/features', {\n        method,\n        headers: { 'Content-Type': 'application/json' },\n        body,\n      });"
      },
      {
        "file": "frontend/components/admin/FeaturesManager.tsx",
        "function": null,
        "snippet": "irreversible.`)) return;\n    setSaving(true);\n    setError(null);\n    try {\n      const res = await fetch('/api/admin/features', {\n        method: 'DELETE',\n        headers: { 'Content-Type': 'application/json' },\n        body:"
      },
      {
        "file": "frontend/app/admin/features/FeatureManagementClient.tsx",
        "function": null,
        "snippet": "ess groups in parallel\n      const [featuresResponse, groupsResponse] = await Promise.all([\n        fetch('/api/admin/features', { credentials: 'include' }),\n        fetch('/api/access-groups', { credentials: 'include' })"
      },
      {
        "file": "frontend/app/admin/features/FeatureManagementClient.tsx",
        "function": null,
        "snippet": "const handleSaveEdit = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch('/api/admin/features', {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',"
      },
      {
        "file": "frontend/app/admin/features/FeatureManagementClient.tsx",
        "function": null,
        "snippet": "name are required');\n        return;\n      }\n\n      setLoading(true);\n      const response = await fetch('/api/admin/features', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',"
      },
      {
        "file": "frontend/app/admin/features/FeatureManagementClient.tsx",
        "function": null,
        "snippet": "dpoint in the API for features, so we'll use PATCH to set active=false\n      const response = await fetch('/api/admin/features', {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',"
      },
      {
        "file": "frontend/.next/static/chunks/app/admin/features/page-0eace1bb17bc98d4.js",
        "function": null,
        "snippet": "fresh failed:\",e)}catch(e){console.warn(\"Session refresh exception:\",e)}let[t,r]=await Promise.all([fetch(\"/api/admin/features\",{credentials:\"include\"}),fetch(\"/api/access-groups\",{credentials:\"include\"})]);if(403===t.status)th"
      },
      {
        "file": "frontend/.next/static/chunks/app/admin/features/page-0eace1bb17bc98d4.js",
        "function": null,
        "snippet": "(\"asc\"===R?\"desc\":\"asc\"):(O(e),T(\"asc\"))},ea=()=>{J(null),P({})},el=async()=>{try{C(!0);let e=await fetch(\"/api/admin/features\",{method:\"PATCH\",headers:{\"Content-Type\":\"application/json\"},credentials:\"include\",body:JSON.stringi"
      },
      {
        "file": "frontend/.next/static/chunks/app/admin/features/page-0eace1bb17bc98d4.js",
        "function": null,
        "snippet": "nc()=>{try{if(!W.key||!W.name)return void em(\"error\",\"Key and name are required\");C(!0);let e=await fetch(\"/api/admin/features\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},credentials:\"include\",body:JSON.stringif"
      },
      {
        "file": "frontend/.next/static/chunks/app/admin/features/page-0eace1bb17bc98d4.js",
        "function": null,
        "snippet": "to create feature\")}finally{C(!1)}},ed=()=>{U(null),G(!1)},eo=async()=>{if(H)try{C(!0);let e=await fetch(\"/api/admin/features\",{method:\"PATCH\",headers:{\"Content-Type\":\"application/json\"},credentials:\"include\",body:JSON.stringi"
      },
      {
        "file": "frontend/.next/server/app/admin/features/page.js",
        "function": null,
        "snippet": "fresh failed:\",a)}catch(a){console.warn(\"Session refresh exception:\",a)}let[b,d]=await Promise.all([fetch(\"/api/admin/features\",{credentials:\"include\"}),fetch(\"/api/access-groups\",{credentials:\"include\"})]);if(403===b.status)th"
      },
      {
        "file": "frontend/.next/server/app/admin/features/page.js",
        "function": null,
        "snippet": "(\"asc\"===H?\"desc\":\"asc\"):(G(a),I(\"asc\"))},af=()=>{O(null),Q({})},ag=async()=>{try{A(!0);let a=await fetch(\"/api/admin/features\",{method:\"PATCH\",headers:{\"Content-Type\":\"application/json\"},credentials:\"include\",body:JSON.stringi"
      },
      {
        "file": "frontend/.next/server/app/admin/features/page.js",
        "function": null,
        "snippet": "nc()=>{try{if(!L.key||!L.name)return void an(\"error\",\"Key and name are required\");A(!0);let a=await fetch(\"/api/admin/features\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},credentials:\"include\",body:JSON.stringif"
      },
      {
        "file": "frontend/.next/server/app/admin/features/page.js",
        "function": null,
        "snippet": "to create feature\")}finally{A(!1)}},aj=()=>{U(null),W(!1)},ak=async()=>{if(T)try{A(!0);let a=await fetch(\"/api/admin/features\",{method:\"PATCH\",headers:{\"Content-Type\":\"application/json\"},credentials:\"include\",body:JSON.stringi"
      }
    ],
    "/api/admin/group-members": [
      {
        "file": "frontend/components/admin/GroupMemberManager.tsx",
        "function": null,
        "snippet": "roupsRes = await fetch('/api/admin/groups').then(r => r.json());\n      const assignmentsRes = await fetch('/api/admin/group-members').then(r => r.json());\n      setUsers(Array.isArray(usersRes.users) ? usersRes.users : []);\n      se"
      },
      {
        "file": "frontend/components/admin/GroupMemberManager.tsx",
        "function": null,
        "snippet": "// Add a user to a group\n  async function handleAssign(userId: string, groupId: number) {\n    await fetch('/api/admin/group-members', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.st"
      },
      {
        "file": "frontend/components/admin/GroupMemberManager.tsx",
        "function": null,
        "snippet": "move a user from a group\n  async function handleRemove(userId: string, groupId: number) {\n    await fetch('/api/admin/group-members', {\n      method: 'DELETE',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON."
      }
    ],
    "/api/admin/group-features": [
      {
        "file": "frontend/components/admin/GroupFeatureManager.tsx",
        "function": null,
        "snippet": "oup?.id]);\n\n  async function addFeature(key: string) {\n    setLoading(true);\n    const resp = await fetch('/api/admin/group-features', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.st"
      },
      {
        "file": "frontend/components/admin/GroupFeatureManager.tsx",
        "function": null,
        "snippet": "e);\n  }\n\n  async function removeFeature(key: string) {\n    setLoading(true);\n    const resp = await fetch('/api/admin/group-features', {\n      method: 'DELETE',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON."
      },
      {
        "file": "frontend/app/admin/features/FeatureManagementClient.tsx",
        "function": null,
        "snippet": "reKey: string, groupId: number) => {\n    try {\n      setLoading(true);\n      const response = await fetch('/api/admin/group-features', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',"
      },
      {
        "file": "frontend/app/admin/features/FeatureManagementClient.tsx",
        "function": null,
        "snippet": "reKey: string, groupId: number) => {\n    try {\n      setLoading(true);\n      const response = await fetch('/api/admin/group-features', {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json',"
      },
      {
        "file": "frontend/.next/static/chunks/app/admin/features/page-0eace1bb17bc98d4.js",
        "function": null,
        "snippet": "f Error?e.message:\"Failed to delete feature\")}finally{C(!1)}},ec=async(e,t)=>{try{C(!0);let s=await fetch(\"/api/admin/group-features\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},credentials:\"include\",body:JSON.stringif"
      },
      {
        "file": "frontend/.next/static/chunks/app/admin/features/page-0eace1bb17bc98d4.js",
        "function": null,
        "snippet": "f Error?e.message:\"Failed to assign feature\")}finally{C(!1)}},eu=async(e,t)=>{try{C(!0);let s=await fetch(\"/api/admin/group-features\",{method:\"DELETE\",headers:{\"Content-Type\":\"application/json\"},credentials:\"include\",body:JSON.string"
      },
      {
        "file": "frontend/.next/server/app/admin/features/page.js",
        "function": null,
        "snippet": "f Error?a.message:\"Failed to delete feature\")}finally{A(!1)}},al=async(a,b)=>{try{A(!0);let c=await fetch(\"/api/admin/group-features\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},credentials:\"include\",body:JSON.stringif"
      },
      {
        "file": "frontend/.next/server/app/admin/features/page.js",
        "function": null,
        "snippet": "f Error?a.message:\"Failed to assign feature\")}finally{A(!1)}},am=async(a,b)=>{try{A(!0);let c=await fetch(\"/api/admin/group-features\",{method:\"DELETE\",headers:{\"Content-Type\":\"application/json\"},credentials:\"include\",body:JSON.string"
      }
    ],
    "/api/debug/config": [
      {
        "file": "frontend/app/components/AuthForm.tsx",
        "function": null,
        "snippet": "=> {\n    const checkSupabaseConfig = async () => {\n      try {\n        const configResponse = await fetch('/api/debug/config');\n        if (configResponse.ok) {\n          const configData = await configResponse.json();"
      },
      {
        "file": "frontend/.next/static/chunks/8036-539fd13e1a4c1fd8.js",
        "function": null,
        "snippet": "){let e=(0,i.useRouter)(),[r,o]=(0,t.useState)(\"login\");t.useEffect(()=>{(async()=>{try{let e=await fetch(\"/api/debug/config\");if(e.ok){let r=await e.json();console.log(\"Supabase Configuration:\",r),r.supabaseUrl&&r.hasAnonKey"
      }
    ],
    "/api/access-groups": [
      {
        "file": "frontend/app/admin/features/FeatureManagementClient.tsx",
        "function": null,
        "snippet": "se] = await Promise.all([\n        fetch('/api/admin/features', { credentials: 'include' }),\n        fetch('/api/access-groups', { credentials: 'include' })\n      ]);\n\n      // Check for permission issues\n      if (featuresResp"
      },
      {
        "file": "frontend/app/admin/users/UserManagementClient.tsx",
        "function": null,
        "snippet": "e] = await Promise.all([\n          fetch('/api/admin/users', { credentials: 'include' }),\n          fetch('/api/access-groups', { credentials: 'include' })\n        ]);\n\n        // Check for permission issues\n        if (usersR"
      },
      {
        "file": "frontend/.next/static/chunks/1983-f9a00e7d3a30dbbf.js",
        "function": null,
        "snippet": "function(){k(!0);try{let[e,s]=await Promise.all([fetch(\"/api/admin/users\",{credentials:\"include\"}),fetch(\"/api/access-groups\",{credentials:\"include\"})]);if(403===e.status)throw Error(\"You do not have permission to access user"
      },
      {
        "file": "frontend/.next/static/chunks/app/admin/features/page-0eace1bb17bc98d4.js",
        "function": null,
        "snippet": "esh exception:\",e)}let[t,r]=await Promise.all([fetch(\"/api/admin/features\",{credentials:\"include\"}),fetch(\"/api/access-groups\",{credentials:\"include\"})]);if(403===t.status)throw Error(\"You do not have permission to access feat"
      },
      {
        "file": "frontend/.next/server/app/admin/features/page.js",
        "function": null,
        "snippet": "esh exception:\",a)}let[b,d]=await Promise.all([fetch(\"/api/admin/features\",{credentials:\"include\"}),fetch(\"/api/access-groups\",{credentials:\"include\"})]);if(403===b.status)throw Error(\"You do not have permission to access feat"
      }
    ],
    "/api/user/profile": [
      {
        "file": "frontend/app/components/ui/UserInfoBox.tsx",
        "function": null,
        "snippet": "= await supabase.auth.getUser();\n      if (data?.user) {\n        try {\n          const resp = await fetch('/api/user/profile');\n          const profile = await resp.json();\n          \n          setUserInfo({\n            email"
      },
      {
        "file": "frontend/.next/static/chunks/app/layout-235adcef0db21d5a.js",
        "function": null,
        "snippet": "function(){let{data:e}=await d.N.auth.getUser();if(null==e?void 0:e.user){var t,n,o;try{let n=await fetch(\"/api/user/profile\"),o=await n.json();r({email:null!=(t=e.user.email)?t:\"\",username:o.username||null,groups:o.groups||["
      }
    ]
  },
  "feature_usage": {
    "admin_dashboard": [
      {
        "file": "frontend/utils/rbac.ts",
        "context": "checkAdmin",
        "usage_type": "utility"
      },
      {
        "file": "frontend/app/api/dashboard/route.ts",
        "context": "GET",
        "usage_type": "utility"
      },
      {
        "file": "frontend/.next/server/app/api/dashboard/route.js",
        "context": "w",
        "usage_type": "utility"
      }
    ],
    "insights_page": [
      {
        "file": "frontend/app/api/dashboard/route.ts",
        "context": "GET",
        "usage_type": "utility"
      },
      {
        "file": "frontend/app/insights/page.tsx",
        "context": "InsightsPage",
        "usage_type": "component"
      },
      {
        "file": "frontend/.next/server/app/api/dashboard/route.js",
        "context": "w",
        "usage_type": "utility"
      }
    ],
    "games_page": [
      {
        "file": "frontend/utils/hooks/useRequireFeature.tsx",
        "context": "Unknown",
        "usage_type": "component"
      },
      {
        "file": "frontend/app/games/page.tsx",
        "context": "GamesPage",
        "usage_type": "component"
      }
    ],
    "results_page": [
      {
        "file": "frontend/app/results/page.tsx",
        "context": "ResultsPage",
        "usage_type": "component"
      }
    ],
    "profile_page": [
      {
        "file": "frontend/app/profile/page.tsx",
        "context": "ProfilePage",
        "usage_type": "component"
      }
    ],
    "contact": [
      {
        "file": "frontend/app/contact/page.tsx",
        "context": "ContactPage",
        "usage_type": "component"
      }
    ]
  },
  "last_analyzed": {
    "commit": "c463eae3d146e633bd5008afd5c439705168ed1c",
    "branch": "main",
    "date": "2025-07-24T19:46:18Z"
  }
}